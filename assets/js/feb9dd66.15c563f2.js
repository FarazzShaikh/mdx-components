(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[231],{905:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return h},metadata:function(){return m},toc:function(){return s},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=n(1765),d=["components"],l={title:"Theme Provider"},h="Theme Provider",m={unversionedId:"ThemeProvider",id:"ThemeProvider",isDocsHomePage:!1,title:"Theme Provider",description:"The Theme Provider provides an interface to listen to theme changes. For example, you can detect when the user changes from dark to light mode and vice versa.",source:"@site/docs/ThemeProvider.mdx",sourceDirName:".",slug:"/ThemeProvider",permalink:"/mdx-components/docs/ThemeProvider",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/ThemeProvider.mdx",version:"current",frontMatter:{title:"Theme Provider"},sidebar:"tutorialSidebar",previous:{title:"Spoiler Provider",permalink:"/mdx-components/docs/SpoilerProvider"}},s=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[{value:"<code>onChange</code>",id:"onchange",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,d);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"theme-provider"},"Theme Provider"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"Theme Provider")," provides an interface to listen to theme changes. For example, you can detect when the user changes from dark to light mode and vice versa."),(0,o.kt)(i.y$,{mdxType:"Highlight"},"The text in this line will be Black in Light Mode and White in Dark Mode!"),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"A Highlight component that uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," to change text color based on the theme."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'export const Highlight = ({ children }) => {\n  const [theme, settheme] = useState("");\n\n  function onChange(theme) {\n    settheme(theme);\n  }\n\n  return (\n    <ThemeProvider onChange={onChange}>\n      <span\n        style={{\n          backgroundColor: "#11e8bb70",\n          borderRadius: "5px",\n          color: theme === "dark" ? "#fff" : "#000",\n          padding: "0.1rem",\n          width: "auto",\n        }}\n      >\n        {children}\n      </span>\n    </ThemeProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"props"},"Props"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Prop"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"onChange")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"(theme: string) => void")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"none")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false"))))),(0,o.kt)("h3",{id:"onchange"},(0,o.kt)("inlineCode",{parentName:"h3"},"onChange")),(0,o.kt)("p",null,"A callback called when the theme changes. It recieves the current theme as a string."))}p.isMDXComponent=!0}}]);