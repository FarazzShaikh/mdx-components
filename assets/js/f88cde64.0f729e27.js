(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[870],{9644:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o=n(1765),l=["components"],s={title:"Canvas Provider"},p="Canvas Provider",d={unversionedId:"CanvasProvider",id:"CanvasProvider",isDocsHomePage:!1,title:"Canvas Provider",description:"The Canvas Provider implements Auxilary functionality for the Canvas component. It implements the following:",source:"@site/docs/CanvasProvider.mdx",sourceDirName:".",slug:"/CanvasProvider",permalink:"/mdx-components/docs/CanvasProvider",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/CanvasProvider.mdx",version:"current",frontMatter:{title:"Canvas Provider"},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/mdx-components/docs/Examples"},next:{title:"Caption Provider",permalink:"/mdx-components/docs/CaptionProvider"}},c=[{value:"Example",id:"example",children:[]},{value:"Props",id:"props",children:[{value:"<code>script</code>",id:"script",children:[]},{value:"<code>style</code>",id:"style",children:[]}]}],m={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"canvas-provider"},"Canvas Provider"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Canvas Provider")," implements Auxilary functionality for the ",(0,r.kt)("a",{parentName:"p",href:"/mdx-components/docs/Examples#canvas"},"Canvas")," component. It implements the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Initializes a Canvas element and calls its ",(0,r.kt)("inlineCode",{parentName:"li"},"script")," prop with the canvas' ref."),(0,r.kt)("li",{parentName:"ul"},"Attaches an ",(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"},"Intersection Observer")," and monitors the position of the Canvas on the body."),(0,r.kt)("li",{parentName:"ul"},"Initializes an animation loop if given one."),(0,r.kt)("li",{parentName:"ul"},"If the canvas is outside the viewport and an animation loop is in progress, it halts the loop until the canvas is back in the viewport.")),(0,r.kt)(o.H$,{mdxType:"Canvas2D"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Drawing a Circle on a canvas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'function script(canvas) {\n    const ctx = canvas.getContext("2d");\n    ctx.beginPath();\n    ctx.arc(100, 75, 50, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    function animate() {\n        // Animation Loop\n    }\n\n    return animate;\n}\n\nfunction Canvas() {\n    return (\n        <CanvasProvider \n            script={script} \n            style={{\n                width: "100%",\n                height: "100%",\n            }}\n        />\n    )\n}\n')),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prop"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"script")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(canvas: HTMLCanvasElement) => (() => void)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"none")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"styles")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.CSSProperties")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"none")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))))),(0,r.kt)("h3",{id:"script"},(0,r.kt)("inlineCode",{parentName:"h3"},"script")),(0,r.kt)("p",null,"This prop is a function that receives a ref to the canvas element as its parameter. We can use this function to draw whatever we like on the canvas."),(0,r.kt)("p",null,"This function returns its animation loop. This is another function that is passed into ",(0,r.kt)("inlineCode",{parentName:"p"},"requestAnimationFrame")," to drive canvas-based animations."),(0,r.kt)("h3",{id:"style"},(0,r.kt)("inlineCode",{parentName:"h3"},"style")),(0,r.kt)("p",null,"This is a ",(0,r.kt)("inlineCode",{parentName:"p"},"React.CSSProperties")," object that overwrites the style of the underlying canvas. Use this to set CSS properties like ",(0,r.kt)("inlineCode",{parentName:"p"},"background-color")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"border-radius")))}u.isMDXComponent=!0}}]);